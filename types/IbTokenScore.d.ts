/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IbTokenScoreContract
  extends Truffle.Contract<IbTokenScoreInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IbTokenScoreInstance>;
}

type AllEvents = never;

export interface IbTokenScoreInstance extends Truffle.ContractInstance {
  endTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getCollGlobalScore(
    cToken: string,
    time: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getCollScore(
    user: string,
    cToken: string,
    time: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getDebtGlobalScore(
    cToken: string,
    time: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getDebtScore(
    user: string,
    cToken: string,
    time: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  spin: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  start(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    endTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getCollGlobalScore(
      cToken: string,
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCollScore(
      user: string,
      cToken: string,
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getDebtGlobalScore(
      cToken: string,
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getDebtScore(
      user: string,
      cToken: string,
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    spin: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    start(txDetails?: Truffle.TransactionDetails): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

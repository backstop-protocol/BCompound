/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface EchoTypesComptrollerContract
  extends Truffle.Contract<EchoTypesComptrollerInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<EchoTypesComptrollerInstance>;
}

type AllEvents = never;

export interface EchoTypesComptrollerInstance extends Truffle.ContractInstance {
  addresses(a: string, txDetails?: Truffle.TransactionDetails): Promise<string>;

  admin(txDetails?: Truffle.TransactionDetails): Promise<string>;

  becomeBrains: {
    (unitroller: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      unitroller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      unitroller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      unitroller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  booly(b: boolean, txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  comptrollerImplementation(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  listOInts(
    u: (number | BN | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  pendingAdmin(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pendingComptrollerImplementation(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  reverty(txDetails?: Truffle.TransactionDetails): Promise<void>;

  stringy(s: string, txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    addresses(
      a: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    admin(txDetails?: Truffle.TransactionDetails): Promise<string>;

    becomeBrains: {
      (unitroller: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        unitroller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        unitroller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        unitroller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    booly(b: boolean, txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    comptrollerImplementation(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    listOInts(
      u: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    pendingAdmin(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pendingComptrollerImplementation(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    reverty(txDetails?: Truffle.TransactionDetails): Promise<void>;

    stringy(s: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

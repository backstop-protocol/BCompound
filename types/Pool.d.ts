/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface PoolContract extends Truffle.Contract<PoolInstance> {
  "new"(_jar: string, meta?: Truffle.TransactionDetails): Promise<PoolInstance>;
}

export interface HoldingTimeChanged {
  name: "HoldingTimeChanged";
  args: {
    oldHoldingTime: BN;
    newHoldingTime: BN;
    0: BN;
    1: BN;
  };
}

export interface MemberBite {
  name: "MemberBite";
  args: {
    member: string;
    avatar: string;
    cTokenDebt: string;
    cTokenCollateral: string;
    underlyingAmtToLiquidate: BN;
    0: string;
    1: string;
    2: string;
    3: string;
    4: BN;
  };
}

export interface MemberDeposit {
  name: "MemberDeposit";
  args: {
    member: string;
    underlying: string;
    amount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface MemberToppedUp {
  name: "MemberToppedUp";
  args: {
    member: string;
    avatar: string;
    cToken: string;
    amount: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
  };
}

export interface MemberUntopped {
  name: "MemberUntopped";
  args: {
    member: string;
    avatar: string;
    0: string;
    1: string;
  };
}

export interface MemberWithdraw {
  name: "MemberWithdraw";
  args: {
    member: string;
    underlying: string;
    amount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface MembersSet {
  name: "MembersSet";
  args: {
    members: string[];
    0: string[];
  };
}

export interface MinSharingThresholdChanged {
  name: "MinSharingThresholdChanged";
  args: {
    bToken: string;
    oldThreshold: BN;
    newThreshold: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface MinTopupBpsChanged {
  name: "MinTopupBpsChanged";
  args: {
    oldMinTopupBps: BN;
    newMinTopupBps: BN;
    0: BN;
    1: BN;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface ProfitParamsChanged {
  name: "ProfitParamsChanged";
  args: {
    numerator: BN;
    denominator: BN;
    0: BN;
    1: BN;
  };
}

export interface SelectionDurationChanged {
  name: "SelectionDurationChanged";
  args: {
    oldDuration: BN;
    newDuration: BN;
    0: BN;
    1: BN;
  };
}

type AllEvents =
  | HoldingTimeChanged
  | MemberBite
  | MemberDeposit
  | MemberToppedUp
  | MemberUntopped
  | MemberWithdraw
  | MembersSet
  | MinSharingThresholdChanged
  | MinTopupBpsChanged
  | OwnershipTransferred
  | ProfitParamsChanged
  | SelectionDurationChanged;

export interface PoolInstance extends Truffle.ContractInstance {
  bComptroller(txDetails?: Truffle.TransactionDetails): Promise<string>;

  balance(
    arg0: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  cEther(txDetails?: Truffle.TransactionDetails): Promise<string>;

  comptroller(txDetails?: Truffle.TransactionDetails): Promise<string>;

  emergencyExecute: {
    (
      target: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      target: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      target: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      target: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getDebtTopupInfo: {
    (
      user: string,
      bTokenDebt: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      user: string,
      bTokenDebt: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, boolean]>;
    sendTransaction(
      user: string,
      bTokenDebt: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string,
      bTokenDebt: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getMemberTopupInfo(
    user: string,
    member: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;

  getMembers(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  holdingTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  jar(txDetails?: Truffle.TransactionDetails): Promise<string>;

  liquidateBorrow: {
    (
      borrower: string,
      bTokenCollateral: string,
      bTokenDebt: string,
      underlyingAmtToLiquidate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      borrower: string,
      bTokenCollateral: string,
      bTokenDebt: string,
      underlyingAmtToLiquidate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      borrower: string,
      bTokenCollateral: string,
      bTokenDebt: string,
      underlyingAmtToLiquidate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      borrower: string,
      bTokenCollateral: string,
      bTokenDebt: string,
      underlyingAmtToLiquidate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  members(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  membersLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  minSharingThreshold(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  minTopupBps(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  registry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  selectionDuration(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  setHoldingTime: {
    (
      newHoldingTime: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newHoldingTime: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newHoldingTime: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newHoldingTime: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMembers: {
    (newMembersList: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newMembersList: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newMembersList: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newMembersList: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMinSharingThreshold: {
    (
      bToken: string,
      newMinThreshold: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      bToken: string,
      newMinThreshold: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      bToken: string,
      newMinThreshold: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      bToken: string,
      newMinThreshold: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMinTopupBps: {
    (
      newMinTopupBps: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newMinTopupBps: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newMinTopupBps: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newMinTopupBps: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setProfitParams: {
    (
      numerator: number | BN | string,
      denominator: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      numerator: number | BN | string,
      denominator: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      numerator: number | BN | string,
      denominator: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      numerator: number | BN | string,
      denominator: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setRegistry: {
    (_registry: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _registry: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _registry: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _registry: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSelectionDuration: {
    (
      newDuration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newDuration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newDuration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newDuration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  shareDenominator(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  shareNumerator(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  smallTopupWinner(
    avatar: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  topped(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, string]>;

  topup: {
    (
      user: string,
      bToken: string,
      amount: number | BN | string,
      resetApprove: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      user: string,
      bToken: string,
      amount: number | BN | string,
      resetApprove: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string,
      bToken: string,
      amount: number | BN | string,
      resetApprove: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string,
      bToken: string,
      amount: number | BN | string,
      resetApprove: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  topupBalance(
    arg0: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  untop: {
    (
      user: string,
      underlyingAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      user: string,
      underlyingAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string,
      underlyingAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string,
      underlyingAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      underlying: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      underlying: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      underlying: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      underlying: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    bComptroller(txDetails?: Truffle.TransactionDetails): Promise<string>;

    balance(
      arg0: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    cEther(txDetails?: Truffle.TransactionDetails): Promise<string>;

    comptroller(txDetails?: Truffle.TransactionDetails): Promise<string>;

    emergencyExecute: {
      (
        target: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        target: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        target: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        target: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getDebtTopupInfo: {
      (
        user: string,
        bTokenDebt: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        user: string,
        bTokenDebt: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<[BN, BN, boolean]>;
      sendTransaction(
        user: string,
        bTokenDebt: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        user: string,
        bTokenDebt: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getMemberTopupInfo(
      user: string,
      member: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN]>;

    getMembers(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    holdingTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    jar(txDetails?: Truffle.TransactionDetails): Promise<string>;

    liquidateBorrow: {
      (
        borrower: string,
        bTokenCollateral: string,
        bTokenDebt: string,
        underlyingAmtToLiquidate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        borrower: string,
        bTokenCollateral: string,
        bTokenDebt: string,
        underlyingAmtToLiquidate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        borrower: string,
        bTokenCollateral: string,
        bTokenDebt: string,
        underlyingAmtToLiquidate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        borrower: string,
        bTokenCollateral: string,
        bTokenDebt: string,
        underlyingAmtToLiquidate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    members(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    membersLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    minSharingThreshold(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    minTopupBps(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    registry(txDetails?: Truffle.TransactionDetails): Promise<string>;

    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    selectionDuration(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    setHoldingTime: {
      (
        newHoldingTime: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newHoldingTime: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newHoldingTime: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newHoldingTime: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setMembers: {
      (
        newMembersList: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newMembersList: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newMembersList: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newMembersList: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setMinSharingThreshold: {
      (
        bToken: string,
        newMinThreshold: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        bToken: string,
        newMinThreshold: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        bToken: string,
        newMinThreshold: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        bToken: string,
        newMinThreshold: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setMinTopupBps: {
      (
        newMinTopupBps: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newMinTopupBps: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newMinTopupBps: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newMinTopupBps: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setProfitParams: {
      (
        numerator: number | BN | string,
        denominator: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        numerator: number | BN | string,
        denominator: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        numerator: number | BN | string,
        denominator: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        numerator: number | BN | string,
        denominator: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setRegistry: {
      (_registry: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _registry: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _registry: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _registry: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setSelectionDuration: {
      (
        newDuration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newDuration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newDuration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newDuration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    shareDenominator(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    shareNumerator(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    smallTopupWinner(
      avatar: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    topped(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, string]>;

    topup: {
      (
        user: string,
        bToken: string,
        amount: number | BN | string,
        resetApprove: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        user: string,
        bToken: string,
        amount: number | BN | string,
        resetApprove: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        user: string,
        bToken: string,
        amount: number | BN | string,
        resetApprove: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        user: string,
        bToken: string,
        amount: number | BN | string,
        resetApprove: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    topupBalance(
      arg0: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    untop: {
      (
        user: string,
        underlyingAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        user: string,
        underlyingAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        user: string,
        underlyingAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        user: string,
        underlyingAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdraw: {
      (
        underlying: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        underlying: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        underlying: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        underlying: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "deposit(address,uint256)": {
      (
        underlying: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        underlying: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        underlying: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        underlying: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "deposit()": {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

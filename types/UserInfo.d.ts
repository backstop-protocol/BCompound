/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface UserInfoContract extends Truffle.Contract<UserInfoInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<UserInfoInstance>;
}

type AllEvents = never;

export interface UserInfoInstance extends Truffle.ContractInstance {
  getCompTokenInfo: {
    (
      user: string,
      comptroller: string,
      registry: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      user: string,
      comptroller: string,
      registry: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ compBalance: BN; comp: string }>;
    sendTransaction(
      user: string,
      comptroller: string,
      registry: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string,
      comptroller: string,
      registry: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getImportInfo: {
    (
      user: string,
      ctoken: string[],
      registry: string,
      sugarDaddy: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      user: string,
      ctoken: string[],
      registry: string,
      sugarDaddy: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      avatar: string;
      ctokenAllowance: BN[];
      availableEthBalance: BN;
    }>;
    sendTransaction(
      user: string,
      ctoken: string[],
      registry: string,
      sugarDaddy: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string,
      ctoken: string[],
      registry: string,
      sugarDaddy: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getJarInfo: {
    (
      jar: string,
      ctoken: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      jar: string,
      ctoken: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ ctokenBalance: BN[] }>;
    sendTransaction(
      jar: string,
      ctoken: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      jar: string,
      ctoken: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getNumMarkets: {
    (comptroller: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      comptroller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      comptroller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      comptroller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getPerUserInfo: {
    (
      user: string,
      ctoken: string[],
      assetsIn: string[],
      underlying: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      user: string,
      ctoken: string[],
      assetsIn: string[],
      underlying: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      ctokenBalance: BN[];
      ctokenBorrowBalance: BN[];
      underlyingWalletBalance: BN[];
      underlyingAllowance: BN[];
    }>;
    sendTransaction(
      user: string,
      ctoken: string[],
      assetsIn: string[],
      underlying: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string,
      ctoken: string[],
      assetsIn: string[],
      underlying: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getScoreInfo(
    user: string,
    jarConnector: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ userScore: BN; userScoreProgressPerSec: BN; totalScore: BN }>;

  getTokenInfo: {
    (
      comptroller: string,
      bComptroller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      comptroller: string,
      bComptroller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      btoken: string[];
      ctoken: string[];
      ctokenDecimals: BN[];
      underlying: string[];
      underlyingDecimals: BN[];
      ctokenExchangeRate: BN[];
      underlyingPrice: BN[];
      borrowRate: BN[];
      supplyRate: BN[];
      listed: boolean[];
      collateralFactor: BN[];
      bTotalSupply: BN[];
    }>;
    sendTransaction(
      comptroller: string,
      bComptroller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      comptroller: string,
      bComptroller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getTvlInfo: {
    (
      ctokens: string[],
      registry: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      ctokens: string[],
      registry: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ numAccounts: BN; ctokenBalance: BN[] }>;
    sendTransaction(
      ctokens: string[],
      registry: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      ctokens: string[],
      registry: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getUserInfo: {
    (
      user: string,
      comptroller: string,
      bComptroller: string,
      registry: string,
      sugarDaddy: string,
      jarConnector: string,
      jar: string,
      getTvl: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      user: string,
      comptroller: string,
      bComptroller: string,
      registry: string,
      sugarDaddy: string,
      jarConnector: string,
      jar: string,
      getTvl: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      tokenInfo: {
        btoken: string[];
        ctoken: string[];
        ctokenDecimals: BN[];
        underlying: string[];
        underlyingDecimals: BN[];
        ctokenExchangeRate: BN[];
        underlyingPrice: BN[];
        borrowRate: BN[];
        supplyRate: BN[];
        listed: boolean[];
        collateralFactor: BN[];
        bTotalSupply: BN[];
      };
      cUser: {
        ctokenBalance: BN[];
        ctokenBorrowBalance: BN[];
        underlyingWalletBalance: BN[];
        underlyingAllowance: BN[];
      };
      bUser: {
        ctokenBalance: BN[];
        ctokenBorrowBalance: BN[];
        underlyingWalletBalance: BN[];
        underlyingAllowance: BN[];
      };
      importInfo: {
        avatar: string;
        ctokenAllowance: BN[];
        availableEthBalance: BN;
      };
      scoreInfo: { userScore: BN; userScoreProgressPerSec: BN; totalScore: BN };
      compTokenInfo: { compBalance: BN; comp: string };
      jarInfo: { ctokenBalance: BN[] };
      tvlInfo: { numAccounts: BN; ctokenBalance: BN[] };
    }>;
    sendTransaction(
      user: string,
      comptroller: string,
      bComptroller: string,
      registry: string,
      sugarDaddy: string,
      jarConnector: string,
      jar: string,
      getTvl: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string,
      comptroller: string,
      bComptroller: string,
      registry: string,
      sugarDaddy: string,
      jarConnector: string,
      jar: string,
      getTvl: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    getCompTokenInfo: {
      (
        user: string,
        comptroller: string,
        registry: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        user: string,
        comptroller: string,
        registry: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ compBalance: BN; comp: string }>;
      sendTransaction(
        user: string,
        comptroller: string,
        registry: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        user: string,
        comptroller: string,
        registry: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getImportInfo: {
      (
        user: string,
        ctoken: string[],
        registry: string,
        sugarDaddy: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        user: string,
        ctoken: string[],
        registry: string,
        sugarDaddy: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{
        avatar: string;
        ctokenAllowance: BN[];
        availableEthBalance: BN;
      }>;
      sendTransaction(
        user: string,
        ctoken: string[],
        registry: string,
        sugarDaddy: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        user: string,
        ctoken: string[],
        registry: string,
        sugarDaddy: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getJarInfo: {
      (
        jar: string,
        ctoken: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        jar: string,
        ctoken: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ ctokenBalance: BN[] }>;
      sendTransaction(
        jar: string,
        ctoken: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        jar: string,
        ctoken: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getNumMarkets: {
      (comptroller: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        comptroller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        comptroller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        comptroller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getPerUserInfo: {
      (
        user: string,
        ctoken: string[],
        assetsIn: string[],
        underlying: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        user: string,
        ctoken: string[],
        assetsIn: string[],
        underlying: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<{
        ctokenBalance: BN[];
        ctokenBorrowBalance: BN[];
        underlyingWalletBalance: BN[];
        underlyingAllowance: BN[];
      }>;
      sendTransaction(
        user: string,
        ctoken: string[],
        assetsIn: string[],
        underlying: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        user: string,
        ctoken: string[],
        assetsIn: string[],
        underlying: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getScoreInfo(
      user: string,
      jarConnector: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ userScore: BN; userScoreProgressPerSec: BN; totalScore: BN }>;

    getTokenInfo: {
      (
        comptroller: string,
        bComptroller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        comptroller: string,
        bComptroller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{
        btoken: string[];
        ctoken: string[];
        ctokenDecimals: BN[];
        underlying: string[];
        underlyingDecimals: BN[];
        ctokenExchangeRate: BN[];
        underlyingPrice: BN[];
        borrowRate: BN[];
        supplyRate: BN[];
        listed: boolean[];
        collateralFactor: BN[];
        bTotalSupply: BN[];
      }>;
      sendTransaction(
        comptroller: string,
        bComptroller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        comptroller: string,
        bComptroller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getTvlInfo: {
      (
        ctokens: string[],
        registry: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        ctokens: string[],
        registry: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ numAccounts: BN; ctokenBalance: BN[] }>;
      sendTransaction(
        ctokens: string[],
        registry: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        ctokens: string[],
        registry: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getUserInfo: {
      (
        user: string,
        comptroller: string,
        bComptroller: string,
        registry: string,
        sugarDaddy: string,
        jarConnector: string,
        jar: string,
        getTvl: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        user: string,
        comptroller: string,
        bComptroller: string,
        registry: string,
        sugarDaddy: string,
        jarConnector: string,
        jar: string,
        getTvl: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{
        tokenInfo: {
          btoken: string[];
          ctoken: string[];
          ctokenDecimals: BN[];
          underlying: string[];
          underlyingDecimals: BN[];
          ctokenExchangeRate: BN[];
          underlyingPrice: BN[];
          borrowRate: BN[];
          supplyRate: BN[];
          listed: boolean[];
          collateralFactor: BN[];
          bTotalSupply: BN[];
        };
        cUser: {
          ctokenBalance: BN[];
          ctokenBorrowBalance: BN[];
          underlyingWalletBalance: BN[];
          underlyingAllowance: BN[];
        };
        bUser: {
          ctokenBalance: BN[];
          ctokenBorrowBalance: BN[];
          underlyingWalletBalance: BN[];
          underlyingAllowance: BN[];
        };
        importInfo: {
          avatar: string;
          ctokenAllowance: BN[];
          availableEthBalance: BN;
        };
        scoreInfo: {
          userScore: BN;
          userScoreProgressPerSec: BN;
          totalScore: BN;
        };
        compTokenInfo: { compBalance: BN; comp: string };
        jarInfo: { ctokenBalance: BN[] };
        tvlInfo: { numAccounts: BN; ctokenBalance: BN[] };
      }>;
      sendTransaction(
        user: string,
        comptroller: string,
        bComptroller: string,
        registry: string,
        sugarDaddy: string,
        jarConnector: string,
        jar: string,
        getTvl: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        user: string,
        comptroller: string,
        bComptroller: string,
        registry: string,
        sugarDaddy: string,
        jarConnector: string,
        jar: string,
        getTvl: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ComptrollerRopstenContract
  extends Truffle.Contract<ComptrollerRopstenInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ComptrollerRopstenInstance>;
}

export interface ActionPaused_string_bool {
  name: "ActionPaused";
  args: {
    action: string;
    pauseState: boolean;
    0: string;
    1: boolean;
  };
}

export interface ActionPaused_address_string_bool {
  name: "ActionPaused";
  args: {
    cToken: string;
    action: string;
    pauseState: boolean;
    0: string;
    1: string;
    2: boolean;
  };
}

type ActionPaused = ActionPaused_string_bool | ActionPaused_address_string_bool;

export interface CompSpeedUpdated {
  name: "CompSpeedUpdated";
  args: {
    cToken: string;
    newSpeed: BN;
    0: string;
    1: BN;
  };
}

export interface DistributedBorrowerComp {
  name: "DistributedBorrowerComp";
  args: {
    cToken: string;
    borrower: string;
    compDelta: BN;
    compBorrowIndex: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface DistributedSupplierComp {
  name: "DistributedSupplierComp";
  args: {
    cToken: string;
    supplier: string;
    compDelta: BN;
    compSupplyIndex: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface Failure {
  name: "Failure";
  args: {
    error: BN;
    info: BN;
    detail: BN;
    0: BN;
    1: BN;
    2: BN;
  };
}

export interface MarketComped {
  name: "MarketComped";
  args: {
    cToken: string;
    isComped: boolean;
    0: string;
    1: boolean;
  };
}

export interface MarketEntered {
  name: "MarketEntered";
  args: {
    cToken: string;
    account: string;
    0: string;
    1: string;
  };
}

export interface MarketExited {
  name: "MarketExited";
  args: {
    cToken: string;
    account: string;
    0: string;
    1: string;
  };
}

export interface MarketListed {
  name: "MarketListed";
  args: {
    cToken: string;
    0: string;
  };
}

export interface NewCloseFactor {
  name: "NewCloseFactor";
  args: {
    oldCloseFactorMantissa: BN;
    newCloseFactorMantissa: BN;
    0: BN;
    1: BN;
  };
}

export interface NewCollateralFactor {
  name: "NewCollateralFactor";
  args: {
    cToken: string;
    oldCollateralFactorMantissa: BN;
    newCollateralFactorMantissa: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface NewCompRate {
  name: "NewCompRate";
  args: {
    oldCompRate: BN;
    newCompRate: BN;
    0: BN;
    1: BN;
  };
}

export interface NewLiquidationIncentive {
  name: "NewLiquidationIncentive";
  args: {
    oldLiquidationIncentiveMantissa: BN;
    newLiquidationIncentiveMantissa: BN;
    0: BN;
    1: BN;
  };
}

export interface NewMaxAssets {
  name: "NewMaxAssets";
  args: {
    oldMaxAssets: BN;
    newMaxAssets: BN;
    0: BN;
    1: BN;
  };
}

export interface NewPauseGuardian {
  name: "NewPauseGuardian";
  args: {
    oldPauseGuardian: string;
    newPauseGuardian: string;
    0: string;
    1: string;
  };
}

export interface NewPriceOracle {
  name: "NewPriceOracle";
  args: {
    oldPriceOracle: string;
    newPriceOracle: string;
    0: string;
    1: string;
  };
}

type AllEvents =
  | ActionPaused
  | CompSpeedUpdated
  | DistributedBorrowerComp
  | DistributedSupplierComp
  | Failure
  | MarketComped
  | MarketEntered
  | MarketExited
  | MarketListed
  | NewCloseFactor
  | NewCollateralFactor
  | NewCompRate
  | NewLiquidationIncentive
  | NewMaxAssets
  | NewPauseGuardian
  | NewPriceOracle;

export interface ComptrollerRopstenInstance extends Truffle.ContractInstance {
  _addCompMarkets: {
    (cTokens: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      cTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      cTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _become: {
    (
      unitroller: string,
      compRate_: number | BN | string,
      compMarketsToAdd: string[],
      otherMarketsToAdd: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      unitroller: string,
      compRate_: number | BN | string,
      compMarketsToAdd: string[],
      otherMarketsToAdd: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      unitroller: string,
      compRate_: number | BN | string,
      compMarketsToAdd: string[],
      otherMarketsToAdd: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      unitroller: string,
      compRate_: number | BN | string,
      compMarketsToAdd: string[],
      otherMarketsToAdd: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _becomeG3: {
    (
      compRate_: number | BN | string,
      compMarketsToAdd: string[],
      otherMarketsToAdd: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      compRate_: number | BN | string,
      compMarketsToAdd: string[],
      otherMarketsToAdd: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      compRate_: number | BN | string,
      compMarketsToAdd: string[],
      otherMarketsToAdd: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      compRate_: number | BN | string,
      compMarketsToAdd: string[],
      otherMarketsToAdd: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _borrowGuardianPaused(
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  _dropCompMarket: {
    (cToken: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(cToken: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      cToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _mintGuardianPaused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  _setBorrowPaused: {
    (
      cToken: string,
      state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      cToken: string,
      state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setCloseFactor: {
    (
      newCloseFactorMantissa: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newCloseFactorMantissa: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      newCloseFactorMantissa: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newCloseFactorMantissa: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setCollateralFactor: {
    (
      cToken: string,
      newCollateralFactorMantissa: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      newCollateralFactorMantissa: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      cToken: string,
      newCollateralFactorMantissa: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      newCollateralFactorMantissa: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setCompRate: {
    (
      compRate_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      compRate_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      compRate_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      compRate_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setLiquidationIncentive: {
    (
      newLiquidationIncentiveMantissa: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newLiquidationIncentiveMantissa: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      newLiquidationIncentiveMantissa: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newLiquidationIncentiveMantissa: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setMaxAssets: {
    (
      newMaxAssets: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newMaxAssets: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      newMaxAssets: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newMaxAssets: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setMintPaused: {
    (
      cToken: string,
      state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      cToken: string,
      state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setPauseGuardian: {
    (newPauseGuardian: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newPauseGuardian: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      newPauseGuardian: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newPauseGuardian: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setPriceOracle: {
    (newOracle: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      newOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setSeizePaused: {
    (state: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setTransferPaused: {
    (state: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _supportMarket: {
    (cToken: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(cToken: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(
      cToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  accountAssets(
    arg0: string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  admin(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allMarkets(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  borrowAllowed: {
    (
      cToken: string,
      borrower: string,
      borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      borrower: string,
      borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      cToken: string,
      borrower: string,
      borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      borrower: string,
      borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  borrowGuardianPaused(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  borrowVerify: {
    (
      cToken: string,
      borrower: string,
      borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      borrower: string,
      borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      cToken: string,
      borrower: string,
      borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      borrower: string,
      borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  checkMembership(
    account: string,
    cToken: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  closeFactorMantissa(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  compAccrued(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  compBorrowState(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  compBorrowerIndex(
    arg0: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  compClaimThreshold(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  compInitialIndex(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  compRate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  compSpeeds(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  compSupplierIndex(
    arg0: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  compSupplyState(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  comptrollerImplementation(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  enterMarkets: {
    (cTokens: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      cTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      cTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  exitMarket: {
    (cTokenAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      cTokenAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      cTokenAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cTokenAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getAccountLiquidity(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;

  getAllMarkets(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getAssetsIn(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  getBlockNumber(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getCompAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getHypotheticalAccountLiquidity(
    account: string,
    cTokenModify: string,
    redeemTokens: number | BN | string,
    borrowAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;

  isComptroller(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  liquidateBorrowAllowed: {
    (
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  liquidateBorrowVerify: {
    (
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      actualRepayAmount: number | BN | string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      actualRepayAmount: number | BN | string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      actualRepayAmount: number | BN | string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      actualRepayAmount: number | BN | string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  liquidateCalculateSeizeTokens(
    cTokenBorrowed: string,
    cTokenCollateral: string,
    actualRepayAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  liquidationIncentiveMantissa(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  markets(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[boolean, BN, boolean]>;

  maxAssets(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  mintAllowed: {
    (
      cToken: string,
      minter: string,
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      minter: string,
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      cToken: string,
      minter: string,
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      minter: string,
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintGuardianPaused(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  mintVerify: {
    (
      cToken: string,
      minter: string,
      actualMintAmount: number | BN | string,
      mintTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      minter: string,
      actualMintAmount: number | BN | string,
      mintTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      cToken: string,
      minter: string,
      actualMintAmount: number | BN | string,
      mintTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      minter: string,
      actualMintAmount: number | BN | string,
      mintTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  oracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pauseGuardian(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pendingAdmin(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pendingComptrollerImplementation(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  redeemAllowed: {
    (
      cToken: string,
      redeemer: string,
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      redeemer: string,
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      cToken: string,
      redeemer: string,
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      redeemer: string,
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemVerify: {
    (
      cToken: string,
      redeemer: string,
      redeemAmount: number | BN | string,
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      redeemer: string,
      redeemAmount: number | BN | string,
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      cToken: string,
      redeemer: string,
      redeemAmount: number | BN | string,
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      redeemer: string,
      redeemAmount: number | BN | string,
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  refreshCompSpeeds: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  repayBorrowAllowed: {
    (
      cToken: string,
      payer: string,
      borrower: string,
      repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      payer: string,
      borrower: string,
      repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      cToken: string,
      payer: string,
      borrower: string,
      repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      payer: string,
      borrower: string,
      repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  repayBorrowVerify: {
    (
      cToken: string,
      payer: string,
      borrower: string,
      actualRepayAmount: number | BN | string,
      borrowerIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      payer: string,
      borrower: string,
      actualRepayAmount: number | BN | string,
      borrowerIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      cToken: string,
      payer: string,
      borrower: string,
      actualRepayAmount: number | BN | string,
      borrowerIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      payer: string,
      borrower: string,
      actualRepayAmount: number | BN | string,
      borrowerIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  seizeAllowed: {
    (
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  seizeGuardianPaused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  seizeVerify: {
    (
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferAllowed: {
    (
      cToken: string,
      src: string,
      dst: string,
      transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      src: string,
      dst: string,
      transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      cToken: string,
      src: string,
      dst: string,
      transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      src: string,
      dst: string,
      transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferGuardianPaused(
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferVerify: {
    (
      cToken: string,
      src: string,
      dst: string,
      transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      src: string,
      dst: string,
      transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      cToken: string,
      src: string,
      dst: string,
      transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      src: string,
      dst: string,
      transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    _addCompMarkets: {
      (cTokens: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        cTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        cTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _become: {
      (
        unitroller: string,
        compRate_: number | BN | string,
        compMarketsToAdd: string[],
        otherMarketsToAdd: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        unitroller: string,
        compRate_: number | BN | string,
        compMarketsToAdd: string[],
        otherMarketsToAdd: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        unitroller: string,
        compRate_: number | BN | string,
        compMarketsToAdd: string[],
        otherMarketsToAdd: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        unitroller: string,
        compRate_: number | BN | string,
        compMarketsToAdd: string[],
        otherMarketsToAdd: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _becomeG3: {
      (
        compRate_: number | BN | string,
        compMarketsToAdd: string[],
        otherMarketsToAdd: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        compRate_: number | BN | string,
        compMarketsToAdd: string[],
        otherMarketsToAdd: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        compRate_: number | BN | string,
        compMarketsToAdd: string[],
        otherMarketsToAdd: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        compRate_: number | BN | string,
        compMarketsToAdd: string[],
        otherMarketsToAdd: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _borrowGuardianPaused(
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    _dropCompMarket: {
      (cToken: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        cToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        cToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _mintGuardianPaused(
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    _setBorrowPaused: {
      (
        cToken: string,
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        cToken: string,
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _setCloseFactor: {
      (
        newCloseFactorMantissa: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newCloseFactorMantissa: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        newCloseFactorMantissa: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newCloseFactorMantissa: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _setCollateralFactor: {
      (
        cToken: string,
        newCollateralFactorMantissa: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        newCollateralFactorMantissa: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        cToken: string,
        newCollateralFactorMantissa: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        newCollateralFactorMantissa: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _setCompRate: {
      (
        compRate_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        compRate_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        compRate_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        compRate_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _setLiquidationIncentive: {
      (
        newLiquidationIncentiveMantissa: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newLiquidationIncentiveMantissa: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        newLiquidationIncentiveMantissa: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newLiquidationIncentiveMantissa: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _setMaxAssets: {
      (
        newMaxAssets: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newMaxAssets: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        newMaxAssets: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newMaxAssets: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _setMintPaused: {
      (
        cToken: string,
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        cToken: string,
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _setPauseGuardian: {
      (
        newPauseGuardian: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newPauseGuardian: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        newPauseGuardian: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newPauseGuardian: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _setPriceOracle: {
      (newOracle: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        newOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _setSeizePaused: {
      (state: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _setTransferPaused: {
      (state: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _supportMarket: {
      (cToken: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(cToken: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
      sendTransaction(
        cToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    accountAssets(
      arg0: string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    admin(txDetails?: Truffle.TransactionDetails): Promise<string>;

    allMarkets(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    borrowAllowed: {
      (
        cToken: string,
        borrower: string,
        borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        borrower: string,
        borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        cToken: string,
        borrower: string,
        borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        borrower: string,
        borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    borrowGuardianPaused(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    borrowVerify: {
      (
        cToken: string,
        borrower: string,
        borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        borrower: string,
        borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        cToken: string,
        borrower: string,
        borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        borrower: string,
        borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    checkMembership(
      account: string,
      cToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    closeFactorMantissa(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    compAccrued(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    compBorrowState(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;

    compBorrowerIndex(
      arg0: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    compClaimThreshold(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    compInitialIndex(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    compRate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    compSpeeds(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    compSupplierIndex(
      arg0: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    compSupplyState(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;

    comptrollerImplementation(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    enterMarkets: {
      (cTokens: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        cTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN[]>;
      sendTransaction(
        cTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    exitMarket: {
      (cTokenAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        cTokenAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        cTokenAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cTokenAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getAccountLiquidity(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN]>;

    getAllMarkets(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    getAssetsIn(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    getBlockNumber(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getCompAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getHypotheticalAccountLiquidity(
      account: string,
      cTokenModify: string,
      redeemTokens: number | BN | string,
      borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN]>;

    isComptroller(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    liquidateBorrowAllowed: {
      (
        cTokenBorrowed: string,
        cTokenCollateral: string,
        liquidator: string,
        borrower: string,
        repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cTokenBorrowed: string,
        cTokenCollateral: string,
        liquidator: string,
        borrower: string,
        repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        cTokenBorrowed: string,
        cTokenCollateral: string,
        liquidator: string,
        borrower: string,
        repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cTokenBorrowed: string,
        cTokenCollateral: string,
        liquidator: string,
        borrower: string,
        repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    liquidateBorrowVerify: {
      (
        cTokenBorrowed: string,
        cTokenCollateral: string,
        liquidator: string,
        borrower: string,
        actualRepayAmount: number | BN | string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cTokenBorrowed: string,
        cTokenCollateral: string,
        liquidator: string,
        borrower: string,
        actualRepayAmount: number | BN | string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        cTokenBorrowed: string,
        cTokenCollateral: string,
        liquidator: string,
        borrower: string,
        actualRepayAmount: number | BN | string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cTokenBorrowed: string,
        cTokenCollateral: string,
        liquidator: string,
        borrower: string,
        actualRepayAmount: number | BN | string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    liquidateCalculateSeizeTokens(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      actualRepayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;

    liquidationIncentiveMantissa(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    markets(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, BN, boolean]>;

    maxAssets(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    mintAllowed: {
      (
        cToken: string,
        minter: string,
        mintAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        minter: string,
        mintAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        cToken: string,
        minter: string,
        mintAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        minter: string,
        mintAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    mintGuardianPaused(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    mintVerify: {
      (
        cToken: string,
        minter: string,
        actualMintAmount: number | BN | string,
        mintTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        minter: string,
        actualMintAmount: number | BN | string,
        mintTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        cToken: string,
        minter: string,
        actualMintAmount: number | BN | string,
        mintTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        minter: string,
        actualMintAmount: number | BN | string,
        mintTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    oracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pauseGuardian(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pendingAdmin(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pendingComptrollerImplementation(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    redeemAllowed: {
      (
        cToken: string,
        redeemer: string,
        redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        redeemer: string,
        redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        cToken: string,
        redeemer: string,
        redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        redeemer: string,
        redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    redeemVerify: {
      (
        cToken: string,
        redeemer: string,
        redeemAmount: number | BN | string,
        redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        redeemer: string,
        redeemAmount: number | BN | string,
        redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        cToken: string,
        redeemer: string,
        redeemAmount: number | BN | string,
        redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        redeemer: string,
        redeemAmount: number | BN | string,
        redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    refreshCompSpeeds: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    repayBorrowAllowed: {
      (
        cToken: string,
        payer: string,
        borrower: string,
        repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        payer: string,
        borrower: string,
        repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        cToken: string,
        payer: string,
        borrower: string,
        repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        payer: string,
        borrower: string,
        repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    repayBorrowVerify: {
      (
        cToken: string,
        payer: string,
        borrower: string,
        actualRepayAmount: number | BN | string,
        borrowerIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        payer: string,
        borrower: string,
        actualRepayAmount: number | BN | string,
        borrowerIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        cToken: string,
        payer: string,
        borrower: string,
        actualRepayAmount: number | BN | string,
        borrowerIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        payer: string,
        borrower: string,
        actualRepayAmount: number | BN | string,
        borrowerIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    seizeAllowed: {
      (
        cTokenCollateral: string,
        cTokenBorrowed: string,
        liquidator: string,
        borrower: string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cTokenCollateral: string,
        cTokenBorrowed: string,
        liquidator: string,
        borrower: string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        cTokenCollateral: string,
        cTokenBorrowed: string,
        liquidator: string,
        borrower: string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cTokenCollateral: string,
        cTokenBorrowed: string,
        liquidator: string,
        borrower: string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    seizeGuardianPaused(
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    seizeVerify: {
      (
        cTokenCollateral: string,
        cTokenBorrowed: string,
        liquidator: string,
        borrower: string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cTokenCollateral: string,
        cTokenBorrowed: string,
        liquidator: string,
        borrower: string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        cTokenCollateral: string,
        cTokenBorrowed: string,
        liquidator: string,
        borrower: string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cTokenCollateral: string,
        cTokenBorrowed: string,
        liquidator: string,
        borrower: string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferAllowed: {
      (
        cToken: string,
        src: string,
        dst: string,
        transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        src: string,
        dst: string,
        transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        cToken: string,
        src: string,
        dst: string,
        transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        src: string,
        dst: string,
        transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferGuardianPaused(
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    transferVerify: {
      (
        cToken: string,
        src: string,
        dst: string,
        transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        src: string,
        dst: string,
        transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        cToken: string,
        src: string,
        dst: string,
        transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        src: string,
        dst: string,
        transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "claimComp(address,address[])": {
      (
        holder: string,
        cTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        holder: string,
        cTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        holder: string,
        cTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        holder: string,
        cTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "claimComp(address[],address[],bool,bool)": {
      (
        holders: string[],
        cTokens: string[],
        borrowers: boolean,
        suppliers: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        holders: string[],
        cTokens: string[],
        borrowers: boolean,
        suppliers: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        holders: string[],
        cTokens: string[],
        borrowers: boolean,
        suppliers: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        holders: string[],
        cTokens: string[],
        borrowers: boolean,
        suppliers: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "claimComp(address)": {
      (holder: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        holder: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        holder: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        holder: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface RegistryContract extends Truffle.Contract<RegistryInstance> {
  "new"(
    _comptroller: string,
    _comp: string,
    _cEther: string,
    _pool: string,
    _bComptroller: string,
    _compVoter: string,
    _avatarImpl: string,
    meta?: Truffle.TransactionDetails
  ): Promise<RegistryInstance>;
}

export interface AvatarCallWhitelisted {
  name: "AvatarCallWhitelisted";
  args: {
    target: string;
    functionSig: string;
    whitelist: boolean;
    0: string;
    1: string;
    2: boolean;
  };
}

export interface Delegate {
  name: "Delegate";
  args: {
    delegator: string;
    avatar: string;
    delegatee: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface NewAvatar {
  name: "NewAvatar";
  args: {
    avatar: string;
    owner: string;
    0: string;
    1: string;
  };
}

export interface NewPool {
  name: "NewPool";
  args: {
    oldPool: string;
    newPool: string;
    0: string;
    1: string;
  };
}

export interface NewScore {
  name: "NewScore";
  args: {
    oldScore: string;
    newScore: string;
    0: string;
    1: string;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface RevokeDelegate {
  name: "RevokeDelegate";
  args: {
    delegator: string;
    avatar: string;
    delegatee: string;
    0: string;
    1: string;
    2: string;
  };
}

type AllEvents =
  | AvatarCallWhitelisted
  | Delegate
  | NewAvatar
  | NewPool
  | NewScore
  | OwnershipTransferred
  | RevokeDelegate;

export interface RegistryInstance extends Truffle.ContractInstance {
  avatarImpl(txDetails?: Truffle.TransactionDetails): Promise<string>;

  avatarLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  avatarList(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  avatarOf(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  avatars(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  bComptroller(txDetails?: Truffle.TransactionDetails): Promise<string>;

  cEther(txDetails?: Truffle.TransactionDetails): Promise<string>;

  comp(txDetails?: Truffle.TransactionDetails): Promise<string>;

  compVoter(txDetails?: Truffle.TransactionDetails): Promise<string>;

  comptroller(txDetails?: Truffle.TransactionDetails): Promise<string>;

  delegate(
    arg0: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  delegateAndExecuteOnce: {
    (
      delegatee: string,
      target: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      delegatee: string,
      target: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      delegatee: string,
      target: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      delegatee: string,
      target: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  delegateAvatar: {
    (delegatee: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      delegatee: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      delegatee: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      delegatee: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  doesAvatarExist(
    _avatar: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  doesAvatarExistFor(
    _owner: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  dummyCaller(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getAvatar: {
    (_owner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  newAvatar: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<string>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ownerOf(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  revokeDelegateAvatar: {
    (delegatee: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      delegatee: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      delegatee: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      delegatee: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  score(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setPool: {
    (newPool: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newPool: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newPool: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newPool: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setScore: {
    (newScore: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newScore: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newScore: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newScore: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setWhitelistAvatarCall: {
    (
      target: string,
      functionSig: string,
      list: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      target: string,
      functionSig: string,
      list: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      target: string,
      functionSig: string,
      list: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      target: string,
      functionSig: string,
      list: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  whitelistedAvatarCalls(
    arg0: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    avatarImpl(txDetails?: Truffle.TransactionDetails): Promise<string>;

    avatarLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    avatarList(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    avatarOf(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    avatars(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    bComptroller(txDetails?: Truffle.TransactionDetails): Promise<string>;

    cEther(txDetails?: Truffle.TransactionDetails): Promise<string>;

    comp(txDetails?: Truffle.TransactionDetails): Promise<string>;

    compVoter(txDetails?: Truffle.TransactionDetails): Promise<string>;

    comptroller(txDetails?: Truffle.TransactionDetails): Promise<string>;

    delegate(
      arg0: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    delegateAndExecuteOnce: {
      (
        delegatee: string,
        target: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        delegatee: string,
        target: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        delegatee: string,
        target: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        delegatee: string,
        target: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    delegateAvatar: {
      (delegatee: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        delegatee: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        delegatee: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        delegatee: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    doesAvatarExist(
      _avatar: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    doesAvatarExistFor(
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    dummyCaller(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getAvatar: {
      (_owner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        _owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    newAvatar: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<string>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    ownerOf(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    revokeDelegateAvatar: {
      (delegatee: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        delegatee: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        delegatee: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        delegatee: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    score(txDetails?: Truffle.TransactionDetails): Promise<string>;

    setPool: {
      (newPool: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newPool: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newPool: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newPool: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setScore: {
      (newScore: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newScore: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newScore: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newScore: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setWhitelistAvatarCall: {
      (
        target: string,
        functionSig: string,
        list: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        target: string,
        functionSig: string,
        list: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        target: string,
        functionSig: string,
        list: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        target: string,
        functionSig: string,
        list: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    whitelistedAvatarCalls(
      arg0: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

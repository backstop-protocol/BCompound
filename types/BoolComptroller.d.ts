/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface BoolComptrollerContract
  extends Truffle.Contract<BoolComptrollerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<BoolComptrollerInstance>;
}

type AllEvents = never;

export interface BoolComptrollerInstance extends Truffle.ContractInstance {
  borrowAllowed: {
    (
      _cToken: string,
      _borrower: string,
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _cToken: string,
      _borrower: string,
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _cToken: string,
      _borrower: string,
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cToken: string,
      _borrower: string,
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  borrowVerify: {
    (
      _cToken: string,
      _borrower: string,
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _cToken: string,
      _borrower: string,
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _cToken: string,
      _borrower: string,
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cToken: string,
      _borrower: string,
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  enterMarkets: {
    (_cTokens: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _cTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      _cTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  exitMarket: {
    (_cToken: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_cToken: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(
      _cToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isComptroller(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  liquidateBorrowAllowed: {
    (
      _cTokenBorrowed: string,
      _cTokenCollateral: string,
      _liquidator: string,
      _borrower: string,
      _repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _cTokenBorrowed: string,
      _cTokenCollateral: string,
      _liquidator: string,
      _borrower: string,
      _repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _cTokenBorrowed: string,
      _cTokenCollateral: string,
      _liquidator: string,
      _borrower: string,
      _repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cTokenBorrowed: string,
      _cTokenCollateral: string,
      _liquidator: string,
      _borrower: string,
      _repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  liquidateBorrowVerify: {
    (
      _cTokenBorrowed: string,
      _cTokenCollateral: string,
      _liquidator: string,
      _borrower: string,
      _repayAmount: number | BN | string,
      _seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _cTokenBorrowed: string,
      _cTokenCollateral: string,
      _liquidator: string,
      _borrower: string,
      _repayAmount: number | BN | string,
      _seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _cTokenBorrowed: string,
      _cTokenCollateral: string,
      _liquidator: string,
      _borrower: string,
      _repayAmount: number | BN | string,
      _seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cTokenBorrowed: string,
      _cTokenCollateral: string,
      _liquidator: string,
      _borrower: string,
      _repayAmount: number | BN | string,
      _seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  liquidateCalculateSeizeTokens(
    _cTokenBorrowed: string,
    _cTokenCollateral: string,
    _repayAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  mintAllowed: {
    (
      _cToken: string,
      _minter: string,
      _mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _cToken: string,
      _minter: string,
      _mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _cToken: string,
      _minter: string,
      _mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cToken: string,
      _minter: string,
      _mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintVerify: {
    (
      _cToken: string,
      _minter: string,
      _mintAmount: number | BN | string,
      _mintTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _cToken: string,
      _minter: string,
      _mintAmount: number | BN | string,
      _mintTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _cToken: string,
      _minter: string,
      _mintAmount: number | BN | string,
      _mintTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cToken: string,
      _minter: string,
      _mintAmount: number | BN | string,
      _mintTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemAllowed: {
    (
      _cToken: string,
      _redeemer: string,
      _redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _cToken: string,
      _redeemer: string,
      _redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _cToken: string,
      _redeemer: string,
      _redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cToken: string,
      _redeemer: string,
      _redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemVerify: {
    (
      _cToken: string,
      _redeemer: string,
      _redeemAmount: number | BN | string,
      _redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _cToken: string,
      _redeemer: string,
      _redeemAmount: number | BN | string,
      _redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _cToken: string,
      _redeemer: string,
      _redeemAmount: number | BN | string,
      _redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cToken: string,
      _redeemer: string,
      _redeemAmount: number | BN | string,
      _redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  repayBorrowAllowed: {
    (
      _cToken: string,
      _payer: string,
      _borrower: string,
      _repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _cToken: string,
      _payer: string,
      _borrower: string,
      _repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _cToken: string,
      _payer: string,
      _borrower: string,
      _repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cToken: string,
      _payer: string,
      _borrower: string,
      _repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  repayBorrowVerify: {
    (
      _cToken: string,
      _payer: string,
      _borrower: string,
      _repayAmount: number | BN | string,
      _borrowerIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _cToken: string,
      _payer: string,
      _borrower: string,
      _repayAmount: number | BN | string,
      _borrowerIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _cToken: string,
      _payer: string,
      _borrower: string,
      _repayAmount: number | BN | string,
      _borrowerIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cToken: string,
      _payer: string,
      _borrower: string,
      _repayAmount: number | BN | string,
      _borrowerIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  seizeAllowed: {
    (
      _cTokenCollateral: string,
      _cTokenBorrowed: string,
      _borrower: string,
      _liquidator: string,
      _seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _cTokenCollateral: string,
      _cTokenBorrowed: string,
      _borrower: string,
      _liquidator: string,
      _seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _cTokenCollateral: string,
      _cTokenBorrowed: string,
      _borrower: string,
      _liquidator: string,
      _seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cTokenCollateral: string,
      _cTokenBorrowed: string,
      _borrower: string,
      _liquidator: string,
      _seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  seizeVerify: {
    (
      _cTokenCollateral: string,
      _cTokenBorrowed: string,
      _liquidator: string,
      _borrower: string,
      _seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _cTokenCollateral: string,
      _cTokenBorrowed: string,
      _liquidator: string,
      _borrower: string,
      _seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _cTokenCollateral: string,
      _cTokenBorrowed: string,
      _liquidator: string,
      _borrower: string,
      _seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cTokenCollateral: string,
      _cTokenBorrowed: string,
      _liquidator: string,
      _borrower: string,
      _seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setBorrowAllowed: {
    (allowBorrow_: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      allowBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      allowBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      allowBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setBorrowVerify: {
    (verifyBorrow_: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      verifyBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      verifyBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      verifyBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCalculatedSeizeTokens: {
    (
      seizeTokens_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      seizeTokens_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      seizeTokens_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      seizeTokens_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setFailCalculateSeizeTokens: {
    (shouldFail: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      shouldFail: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      shouldFail: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      shouldFail: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setLiquidateBorrowAllowed: {
    (
      allowLiquidateBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      allowLiquidateBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      allowLiquidateBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      allowLiquidateBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setLiquidateBorrowVerify: {
    (
      verifyLiquidateBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      verifyLiquidateBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      verifyLiquidateBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      verifyLiquidateBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMintAllowed: {
    (allowMint_: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      allowMint_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      allowMint_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      allowMint_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMintVerify: {
    (verifyMint_: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      verifyMint_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      verifyMint_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      verifyMint_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setRedeemAllowed: {
    (allowRedeem_: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      allowRedeem_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      allowRedeem_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      allowRedeem_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setRedeemVerify: {
    (verifyRedeem_: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      verifyRedeem_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      verifyRedeem_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      verifyRedeem_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setRepayBorrowAllowed: {
    (
      allowRepayBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      allowRepayBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      allowRepayBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      allowRepayBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setRepayBorrowVerify: {
    (
      verifyRepayBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      verifyRepayBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      verifyRepayBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      verifyRepayBorrow_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSeizeAllowed: {
    (allowSeize_: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      allowSeize_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      allowSeize_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      allowSeize_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSeizeVerify: {
    (verifySeize_: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      verifySeize_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      verifySeize_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      verifySeize_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTransferAllowed: {
    (allowTransfer_: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      allowTransfer_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      allowTransfer_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      allowTransfer_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTransferVerify: {
    (verifyTransfer_: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      verifyTransfer_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      verifyTransfer_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      verifyTransfer_: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferAllowed: {
    (
      _cToken: string,
      _src: string,
      _dst: string,
      _transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _cToken: string,
      _src: string,
      _dst: string,
      _transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _cToken: string,
      _src: string,
      _dst: string,
      _transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cToken: string,
      _src: string,
      _dst: string,
      _transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferVerify: {
    (
      _cToken: string,
      _src: string,
      _dst: string,
      _transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _cToken: string,
      _src: string,
      _dst: string,
      _transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _cToken: string,
      _src: string,
      _dst: string,
      _transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cToken: string,
      _src: string,
      _dst: string,
      _transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    borrowAllowed: {
      (
        _cToken: string,
        _borrower: string,
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cToken: string,
        _borrower: string,
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _cToken: string,
        _borrower: string,
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cToken: string,
        _borrower: string,
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    borrowVerify: {
      (
        _cToken: string,
        _borrower: string,
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cToken: string,
        _borrower: string,
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _cToken: string,
        _borrower: string,
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cToken: string,
        _borrower: string,
        _borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    enterMarkets: {
      (_cTokens: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _cTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN[]>;
      sendTransaction(
        _cTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    exitMarket: {
      (_cToken: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _cToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _cToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    isComptroller(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    liquidateBorrowAllowed: {
      (
        _cTokenBorrowed: string,
        _cTokenCollateral: string,
        _liquidator: string,
        _borrower: string,
        _repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cTokenBorrowed: string,
        _cTokenCollateral: string,
        _liquidator: string,
        _borrower: string,
        _repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _cTokenBorrowed: string,
        _cTokenCollateral: string,
        _liquidator: string,
        _borrower: string,
        _repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cTokenBorrowed: string,
        _cTokenCollateral: string,
        _liquidator: string,
        _borrower: string,
        _repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    liquidateBorrowVerify: {
      (
        _cTokenBorrowed: string,
        _cTokenCollateral: string,
        _liquidator: string,
        _borrower: string,
        _repayAmount: number | BN | string,
        _seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cTokenBorrowed: string,
        _cTokenCollateral: string,
        _liquidator: string,
        _borrower: string,
        _repayAmount: number | BN | string,
        _seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _cTokenBorrowed: string,
        _cTokenCollateral: string,
        _liquidator: string,
        _borrower: string,
        _repayAmount: number | BN | string,
        _seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cTokenBorrowed: string,
        _cTokenCollateral: string,
        _liquidator: string,
        _borrower: string,
        _repayAmount: number | BN | string,
        _seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    liquidateCalculateSeizeTokens(
      _cTokenBorrowed: string,
      _cTokenCollateral: string,
      _repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;

    mintAllowed: {
      (
        _cToken: string,
        _minter: string,
        _mintAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cToken: string,
        _minter: string,
        _mintAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _cToken: string,
        _minter: string,
        _mintAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cToken: string,
        _minter: string,
        _mintAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    mintVerify: {
      (
        _cToken: string,
        _minter: string,
        _mintAmount: number | BN | string,
        _mintTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cToken: string,
        _minter: string,
        _mintAmount: number | BN | string,
        _mintTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _cToken: string,
        _minter: string,
        _mintAmount: number | BN | string,
        _mintTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cToken: string,
        _minter: string,
        _mintAmount: number | BN | string,
        _mintTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    redeemAllowed: {
      (
        _cToken: string,
        _redeemer: string,
        _redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cToken: string,
        _redeemer: string,
        _redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _cToken: string,
        _redeemer: string,
        _redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cToken: string,
        _redeemer: string,
        _redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    redeemVerify: {
      (
        _cToken: string,
        _redeemer: string,
        _redeemAmount: number | BN | string,
        _redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cToken: string,
        _redeemer: string,
        _redeemAmount: number | BN | string,
        _redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _cToken: string,
        _redeemer: string,
        _redeemAmount: number | BN | string,
        _redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cToken: string,
        _redeemer: string,
        _redeemAmount: number | BN | string,
        _redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    repayBorrowAllowed: {
      (
        _cToken: string,
        _payer: string,
        _borrower: string,
        _repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cToken: string,
        _payer: string,
        _borrower: string,
        _repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _cToken: string,
        _payer: string,
        _borrower: string,
        _repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cToken: string,
        _payer: string,
        _borrower: string,
        _repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    repayBorrowVerify: {
      (
        _cToken: string,
        _payer: string,
        _borrower: string,
        _repayAmount: number | BN | string,
        _borrowerIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cToken: string,
        _payer: string,
        _borrower: string,
        _repayAmount: number | BN | string,
        _borrowerIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _cToken: string,
        _payer: string,
        _borrower: string,
        _repayAmount: number | BN | string,
        _borrowerIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cToken: string,
        _payer: string,
        _borrower: string,
        _repayAmount: number | BN | string,
        _borrowerIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    seizeAllowed: {
      (
        _cTokenCollateral: string,
        _cTokenBorrowed: string,
        _borrower: string,
        _liquidator: string,
        _seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cTokenCollateral: string,
        _cTokenBorrowed: string,
        _borrower: string,
        _liquidator: string,
        _seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _cTokenCollateral: string,
        _cTokenBorrowed: string,
        _borrower: string,
        _liquidator: string,
        _seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cTokenCollateral: string,
        _cTokenBorrowed: string,
        _borrower: string,
        _liquidator: string,
        _seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    seizeVerify: {
      (
        _cTokenCollateral: string,
        _cTokenBorrowed: string,
        _liquidator: string,
        _borrower: string,
        _seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cTokenCollateral: string,
        _cTokenBorrowed: string,
        _liquidator: string,
        _borrower: string,
        _seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _cTokenCollateral: string,
        _cTokenBorrowed: string,
        _liquidator: string,
        _borrower: string,
        _seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cTokenCollateral: string,
        _cTokenBorrowed: string,
        _liquidator: string,
        _borrower: string,
        _seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setBorrowAllowed: {
      (allowBorrow_: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        allowBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        allowBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        allowBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setBorrowVerify: {
      (verifyBorrow_: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        verifyBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        verifyBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        verifyBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCalculatedSeizeTokens: {
      (
        seizeTokens_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        seizeTokens_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        seizeTokens_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        seizeTokens_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setFailCalculateSeizeTokens: {
      (shouldFail: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        shouldFail: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        shouldFail: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        shouldFail: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setLiquidateBorrowAllowed: {
      (
        allowLiquidateBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        allowLiquidateBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        allowLiquidateBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        allowLiquidateBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setLiquidateBorrowVerify: {
      (
        verifyLiquidateBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        verifyLiquidateBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        verifyLiquidateBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        verifyLiquidateBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setMintAllowed: {
      (allowMint_: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        allowMint_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        allowMint_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        allowMint_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setMintVerify: {
      (verifyMint_: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        verifyMint_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        verifyMint_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        verifyMint_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setRedeemAllowed: {
      (allowRedeem_: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        allowRedeem_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        allowRedeem_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        allowRedeem_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setRedeemVerify: {
      (verifyRedeem_: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        verifyRedeem_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        verifyRedeem_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        verifyRedeem_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setRepayBorrowAllowed: {
      (
        allowRepayBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        allowRepayBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        allowRepayBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        allowRepayBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setRepayBorrowVerify: {
      (
        verifyRepayBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        verifyRepayBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        verifyRepayBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        verifyRepayBorrow_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setSeizeAllowed: {
      (allowSeize_: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        allowSeize_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        allowSeize_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        allowSeize_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setSeizeVerify: {
      (verifySeize_: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        verifySeize_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        verifySeize_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        verifySeize_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setTransferAllowed: {
      (
        allowTransfer_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        allowTransfer_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        allowTransfer_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        allowTransfer_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setTransferVerify: {
      (
        verifyTransfer_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        verifyTransfer_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        verifyTransfer_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        verifyTransfer_: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferAllowed: {
      (
        _cToken: string,
        _src: string,
        _dst: string,
        _transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cToken: string,
        _src: string,
        _dst: string,
        _transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _cToken: string,
        _src: string,
        _dst: string,
        _transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cToken: string,
        _src: string,
        _dst: string,
        _transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferVerify: {
      (
        _cToken: string,
        _src: string,
        _dst: string,
        _transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cToken: string,
        _src: string,
        _dst: string,
        _transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _cToken: string,
        _src: string,
        _dst: string,
        _transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cToken: string,
        _src: string,
        _dst: string,
        _transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

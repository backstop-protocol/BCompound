/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ComptrollerInterfaceContract
  extends Truffle.Contract<ComptrollerInterfaceInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ComptrollerInterfaceInstance>;
}

type AllEvents = never;

export interface ComptrollerInterfaceInstance extends Truffle.ContractInstance {
  borrowAllowed: {
    (
      cToken: string,
      borrower: string,
      borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      borrower: string,
      borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      cToken: string,
      borrower: string,
      borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      borrower: string,
      borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  borrowVerify: {
    (
      cToken: string,
      borrower: string,
      borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      borrower: string,
      borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      cToken: string,
      borrower: string,
      borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      borrower: string,
      borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  closeFactorMantissa(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  enterMarkets: {
    (cTokens: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      cTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      cTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  exitMarket: {
    (cToken: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(cToken: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(
      cToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getAccountLiquidity(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;

  getAssetsIn(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  liquidateBorrowAllowed: {
    (
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  liquidateBorrowVerify: {
    (
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: number | BN | string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: number | BN | string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: number | BN | string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: number | BN | string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  liquidateCalculateSeizeTokens(
    cTokenBorrowed: string,
    cTokenCollateral: string,
    repayAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  liquidationIncentiveMantissa(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  mintAllowed: {
    (
      cToken: string,
      minter: string,
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      minter: string,
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      cToken: string,
      minter: string,
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      minter: string,
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintVerify: {
    (
      cToken: string,
      minter: string,
      mintAmount: number | BN | string,
      mintTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      minter: string,
      mintAmount: number | BN | string,
      mintTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      cToken: string,
      minter: string,
      mintAmount: number | BN | string,
      mintTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      minter: string,
      mintAmount: number | BN | string,
      mintTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemAllowed: {
    (
      cToken: string,
      redeemer: string,
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      redeemer: string,
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      cToken: string,
      redeemer: string,
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      redeemer: string,
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemVerify: {
    (
      cToken: string,
      redeemer: string,
      redeemAmount: number | BN | string,
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      redeemer: string,
      redeemAmount: number | BN | string,
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      cToken: string,
      redeemer: string,
      redeemAmount: number | BN | string,
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      redeemer: string,
      redeemAmount: number | BN | string,
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  repayBorrowAllowed: {
    (
      cToken: string,
      payer: string,
      borrower: string,
      repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      payer: string,
      borrower: string,
      repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      cToken: string,
      payer: string,
      borrower: string,
      repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      payer: string,
      borrower: string,
      repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  repayBorrowVerify: {
    (
      cToken: string,
      payer: string,
      borrower: string,
      repayAmount: number | BN | string,
      borrowerIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      payer: string,
      borrower: string,
      repayAmount: number | BN | string,
      borrowerIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      cToken: string,
      payer: string,
      borrower: string,
      repayAmount: number | BN | string,
      borrowerIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      payer: string,
      borrower: string,
      repayAmount: number | BN | string,
      borrowerIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  seizeAllowed: {
    (
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  seizeVerify: {
    (
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cTokenCollateral: string,
      cTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferAllowed: {
    (
      cToken: string,
      src: string,
      dst: string,
      transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      src: string,
      dst: string,
      transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      cToken: string,
      src: string,
      dst: string,
      transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      src: string,
      dst: string,
      transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferVerify: {
    (
      cToken: string,
      src: string,
      dst: string,
      transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      cToken: string,
      src: string,
      dst: string,
      transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      cToken: string,
      src: string,
      dst: string,
      transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      src: string,
      dst: string,
      transferTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    borrowAllowed: {
      (
        cToken: string,
        borrower: string,
        borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        borrower: string,
        borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        cToken: string,
        borrower: string,
        borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        borrower: string,
        borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    borrowVerify: {
      (
        cToken: string,
        borrower: string,
        borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        borrower: string,
        borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        cToken: string,
        borrower: string,
        borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        borrower: string,
        borrowAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    closeFactorMantissa(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    enterMarkets: {
      (cTokens: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        cTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN[]>;
      sendTransaction(
        cTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    exitMarket: {
      (cToken: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(cToken: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
      sendTransaction(
        cToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getAccountLiquidity(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN]>;

    getAssetsIn(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    liquidateBorrowAllowed: {
      (
        cTokenBorrowed: string,
        cTokenCollateral: string,
        liquidator: string,
        borrower: string,
        repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cTokenBorrowed: string,
        cTokenCollateral: string,
        liquidator: string,
        borrower: string,
        repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        cTokenBorrowed: string,
        cTokenCollateral: string,
        liquidator: string,
        borrower: string,
        repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cTokenBorrowed: string,
        cTokenCollateral: string,
        liquidator: string,
        borrower: string,
        repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    liquidateBorrowVerify: {
      (
        cTokenBorrowed: string,
        cTokenCollateral: string,
        liquidator: string,
        borrower: string,
        repayAmount: number | BN | string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cTokenBorrowed: string,
        cTokenCollateral: string,
        liquidator: string,
        borrower: string,
        repayAmount: number | BN | string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        cTokenBorrowed: string,
        cTokenCollateral: string,
        liquidator: string,
        borrower: string,
        repayAmount: number | BN | string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cTokenBorrowed: string,
        cTokenCollateral: string,
        liquidator: string,
        borrower: string,
        repayAmount: number | BN | string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    liquidateCalculateSeizeTokens(
      cTokenBorrowed: string,
      cTokenCollateral: string,
      repayAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;

    liquidationIncentiveMantissa(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    mintAllowed: {
      (
        cToken: string,
        minter: string,
        mintAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        minter: string,
        mintAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        cToken: string,
        minter: string,
        mintAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        minter: string,
        mintAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    mintVerify: {
      (
        cToken: string,
        minter: string,
        mintAmount: number | BN | string,
        mintTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        minter: string,
        mintAmount: number | BN | string,
        mintTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        cToken: string,
        minter: string,
        mintAmount: number | BN | string,
        mintTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        minter: string,
        mintAmount: number | BN | string,
        mintTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    redeemAllowed: {
      (
        cToken: string,
        redeemer: string,
        redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        redeemer: string,
        redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        cToken: string,
        redeemer: string,
        redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        redeemer: string,
        redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    redeemVerify: {
      (
        cToken: string,
        redeemer: string,
        redeemAmount: number | BN | string,
        redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        redeemer: string,
        redeemAmount: number | BN | string,
        redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        cToken: string,
        redeemer: string,
        redeemAmount: number | BN | string,
        redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        redeemer: string,
        redeemAmount: number | BN | string,
        redeemTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    repayBorrowAllowed: {
      (
        cToken: string,
        payer: string,
        borrower: string,
        repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        payer: string,
        borrower: string,
        repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        cToken: string,
        payer: string,
        borrower: string,
        repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        payer: string,
        borrower: string,
        repayAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    repayBorrowVerify: {
      (
        cToken: string,
        payer: string,
        borrower: string,
        repayAmount: number | BN | string,
        borrowerIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        payer: string,
        borrower: string,
        repayAmount: number | BN | string,
        borrowerIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        cToken: string,
        payer: string,
        borrower: string,
        repayAmount: number | BN | string,
        borrowerIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        payer: string,
        borrower: string,
        repayAmount: number | BN | string,
        borrowerIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    seizeAllowed: {
      (
        cTokenCollateral: string,
        cTokenBorrowed: string,
        liquidator: string,
        borrower: string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cTokenCollateral: string,
        cTokenBorrowed: string,
        liquidator: string,
        borrower: string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        cTokenCollateral: string,
        cTokenBorrowed: string,
        liquidator: string,
        borrower: string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cTokenCollateral: string,
        cTokenBorrowed: string,
        liquidator: string,
        borrower: string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    seizeVerify: {
      (
        cTokenCollateral: string,
        cTokenBorrowed: string,
        liquidator: string,
        borrower: string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cTokenCollateral: string,
        cTokenBorrowed: string,
        liquidator: string,
        borrower: string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        cTokenCollateral: string,
        cTokenBorrowed: string,
        liquidator: string,
        borrower: string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cTokenCollateral: string,
        cTokenBorrowed: string,
        liquidator: string,
        borrower: string,
        seizeTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferAllowed: {
      (
        cToken: string,
        src: string,
        dst: string,
        transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        src: string,
        dst: string,
        transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        cToken: string,
        src: string,
        dst: string,
        transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        src: string,
        dst: string,
        transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferVerify: {
      (
        cToken: string,
        src: string,
        dst: string,
        transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        cToken: string,
        src: string,
        dst: string,
        transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        cToken: string,
        src: string,
        dst: string,
        transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        src: string,
        dst: string,
        transferTokens: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

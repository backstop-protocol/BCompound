/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface UnitrollerContract
  extends Truffle.Contract<UnitrollerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<UnitrollerInstance>;
}

export interface Failure {
  name: "Failure";
  args: {
    error: BN;
    info: BN;
    detail: BN;
    0: BN;
    1: BN;
    2: BN;
  };
}

export interface NewAdmin {
  name: "NewAdmin";
  args: {
    oldAdmin: string;
    newAdmin: string;
    0: string;
    1: string;
  };
}

export interface NewImplementation {
  name: "NewImplementation";
  args: {
    oldImplementation: string;
    newImplementation: string;
    0: string;
    1: string;
  };
}

export interface NewPendingAdmin {
  name: "NewPendingAdmin";
  args: {
    oldPendingAdmin: string;
    newPendingAdmin: string;
    0: string;
    1: string;
  };
}

export interface NewPendingImplementation {
  name: "NewPendingImplementation";
  args: {
    oldPendingImplementation: string;
    newPendingImplementation: string;
    0: string;
    1: string;
  };
}

type AllEvents =
  | Failure
  | NewAdmin
  | NewImplementation
  | NewPendingAdmin
  | NewPendingImplementation;

export interface UnitrollerInstance extends Truffle.ContractInstance {
  _acceptAdmin: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  _acceptImplementation: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  _setPendingAdmin: {
    (newPendingAdmin: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newPendingAdmin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      newPendingAdmin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newPendingAdmin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _setPendingImplementation: {
    (
      newPendingImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newPendingImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      newPendingImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newPendingImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  admin(txDetails?: Truffle.TransactionDetails): Promise<string>;

  comptrollerImplementation(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  pendingAdmin(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pendingComptrollerImplementation(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  methods: {
    _acceptAdmin: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    _acceptImplementation: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    _setPendingAdmin: {
      (
        newPendingAdmin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newPendingAdmin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        newPendingAdmin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newPendingAdmin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _setPendingImplementation: {
      (
        newPendingImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newPendingImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        newPendingImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newPendingImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    admin(txDetails?: Truffle.TransactionDetails): Promise<string>;

    comptrollerImplementation(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    pendingAdmin(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pendingComptrollerImplementation(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface BComptrollerContract
  extends Truffle.Contract<BComptrollerInstance> {
  "new"(
    _comptroller: string,
    meta?: Truffle.TransactionDetails
  ): Promise<BComptrollerInstance>;
}

export interface NewBToken {
  name: "NewBToken";
  args: {
    cToken: string;
    bToken: string;
    0: string;
    1: string;
  };
}

type AllEvents = NewBToken;

export interface BComptrollerInstance extends Truffle.ContractInstance {
  b2c(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<string>;

  c2b(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<string>;

  comptroller(txDetails?: Truffle.TransactionDetails): Promise<string>;

  enterMarket: {
    (bToken: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(bToken: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(
      bToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      bToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  enterMarketOnAvatar: {
    (
      avatar: string,
      bToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      avatar: string,
      bToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      avatar: string,
      bToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      avatar: string,
      bToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  enterMarkets: {
    (bTokens: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      bTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      bTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      bTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  enterMarketsOnAvatar: {
    (
      avatar: string,
      bTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      avatar: string,
      bTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      avatar: string,
      bTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      avatar: string,
      bTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  exitMarket: {
    (bToken: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(bToken: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(
      bToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      bToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  exitMarketOnAvatar: {
    (
      avatar: string,
      bToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      avatar: string,
      bToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      avatar: string,
      bToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      avatar: string,
      bToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getAccountLiquidity(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;

  isBToken(
    bToken: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  newBToken: {
    (cToken: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      cToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      cToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      cToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  oracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

  registry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setRegistry: {
    (_registry: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _registry: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _registry: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _registry: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    b2c(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<string>;

    c2b(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<string>;

    comptroller(txDetails?: Truffle.TransactionDetails): Promise<string>;

    enterMarket: {
      (bToken: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(bToken: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
      sendTransaction(
        bToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        bToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    enterMarketOnAvatar: {
      (
        avatar: string,
        bToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        avatar: string,
        bToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        avatar: string,
        bToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        avatar: string,
        bToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    enterMarkets: {
      (bTokens: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        bTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN[]>;
      sendTransaction(
        bTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        bTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    enterMarketsOnAvatar: {
      (
        avatar: string,
        bTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        avatar: string,
        bTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN[]>;
      sendTransaction(
        avatar: string,
        bTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        avatar: string,
        bTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    exitMarket: {
      (bToken: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(bToken: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
      sendTransaction(
        bToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        bToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    exitMarketOnAvatar: {
      (
        avatar: string,
        bToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        avatar: string,
        bToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        avatar: string,
        bToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        avatar: string,
        bToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getAccountLiquidity(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN]>;

    isBToken(
      bToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    newBToken: {
      (cToken: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        cToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        cToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        cToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    oracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

    registry(txDetails?: Truffle.TransactionDetails): Promise<string>;

    setRegistry: {
      (_registry: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _registry: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _registry: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _registry: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "claimComp(address,address[])": {
      (
        holder: string,
        bTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        holder: string,
        bTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        holder: string,
        bTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        holder: string,
        bTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "claimComp(address[],address[],bool,bool)": {
      (
        holders: string[],
        bTokens: string[],
        borrowers: boolean,
        suppliers: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        holders: string[],
        bTokens: string[],
        borrowers: boolean,
        suppliers: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        holders: string[],
        bTokens: string[],
        borrowers: boolean,
        suppliers: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        holders: string[],
        bTokens: string[],
        borrowers: boolean,
        suppliers: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "claimComp(address)": {
      (holder: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        holder: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        holder: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        holder: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

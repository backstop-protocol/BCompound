/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface VatLikeContract extends Truffle.Contract<VatLikeInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<VatLikeInstance>;
}

type AllEvents = never;

export interface VatLikeInstance extends Truffle.ContractInstance {
  flux: {
    (
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fork: {
    (
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: number | BN | string,
      arg4: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: number | BN | string,
      arg4: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: number | BN | string,
      arg4: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: number | BN | string,
      arg4: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  frob: {
    (
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: number | BN | string,
      arg5: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: number | BN | string,
      arg5: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: number | BN | string,
      arg5: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: number | BN | string,
      arg5: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  hope: {
    (arg0: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  ilks(
    ilk: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, BN, BN]>;

  move: {
    (
      arg0: string,
      arg1: string,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      arg0: string,
      arg1: string,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: string,
      arg1: string,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string,
      arg1: string,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  urns(
    arg0: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  methods: {
    flux: {
      (
        arg0: string,
        arg1: string,
        arg2: string,
        arg3: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        arg0: string,
        arg1: string,
        arg2: string,
        arg3: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        arg0: string,
        arg1: string,
        arg2: string,
        arg3: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: string,
        arg1: string,
        arg2: string,
        arg3: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    fork: {
      (
        arg0: string,
        arg1: string,
        arg2: string,
        arg3: number | BN | string,
        arg4: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        arg0: string,
        arg1: string,
        arg2: string,
        arg3: number | BN | string,
        arg4: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        arg0: string,
        arg1: string,
        arg2: string,
        arg3: number | BN | string,
        arg4: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: string,
        arg1: string,
        arg2: string,
        arg3: number | BN | string,
        arg4: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    frob: {
      (
        arg0: string,
        arg1: string,
        arg2: string,
        arg3: string,
        arg4: number | BN | string,
        arg5: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        arg0: string,
        arg1: string,
        arg2: string,
        arg3: string,
        arg4: number | BN | string,
        arg5: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        arg0: string,
        arg1: string,
        arg2: string,
        arg3: string,
        arg4: number | BN | string,
        arg5: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: string,
        arg1: string,
        arg2: string,
        arg3: string,
        arg4: number | BN | string,
        arg5: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    hope: {
      (arg0: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        arg0: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    ilks(
      ilk: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN, BN, BN]>;

    move: {
      (
        arg0: string,
        arg1: string,
        arg2: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        arg0: string,
        arg1: string,
        arg2: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        arg0: string,
        arg1: string,
        arg2: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: string,
        arg1: string,
        arg2: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    urns(
      arg0: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface JarMakerConnectorContract
  extends Truffle.Contract<JarMakerConnectorInstance> {
  "new"(
    _ilks: string[],
    _duration: (number | BN | string)[],
    meta?: Truffle.TransactionDetails
  ): Promise<JarMakerConnectorInstance>;
}

type AllEvents = never;

export interface JarMakerConnectorInstance extends Truffle.ContractInstance {
  end(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getUserScore(
    user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  ilks(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  man(txDetails?: Truffle.TransactionDetails): Promise<string>;

  milks(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  round(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  score(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setManager: {
    (_manager: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _manager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _manager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _manager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  spin: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  start(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  toUser(user: string, txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    end(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getUserScore(
      user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    ilks(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    man(txDetails?: Truffle.TransactionDetails): Promise<string>;

    milks(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    round(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    score(txDetails?: Truffle.TransactionDetails): Promise<string>;

    setManager: {
      (_manager: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _manager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _manager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _manager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    spin: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    start(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    toUser(
      user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "getGlobalScore()"(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    "getGlobalScore(bytes32)"(
      ilk: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

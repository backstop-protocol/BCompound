/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IRegistryContract extends Truffle.Contract<IRegistryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IRegistryInstance>;
}

type AllEvents = never;

export interface IRegistryInstance extends Truffle.ContractInstance {
  avatarOf(
    owner: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  bComptroller(txDetails?: Truffle.TransactionDetails): Promise<string>;

  cEther(txDetails?: Truffle.TransactionDetails): Promise<string>;

  comp(txDetails?: Truffle.TransactionDetails): Promise<string>;

  comptroller(txDetails?: Truffle.TransactionDetails): Promise<string>;

  delegate(
    avatar: string,
    delegatee: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  doesAvatarExist(
    avatar: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  doesAvatarExistFor(
    owner: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getAvatar: {
    (owner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  newAvatar: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<string>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  ownerOf(
    avatar: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  score(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setPool: {
    (newPool: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newPool: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newPool: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newPool: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  whitelistedAvatarCalls(
    target: string,
    functionSig: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    avatarOf(
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    bComptroller(txDetails?: Truffle.TransactionDetails): Promise<string>;

    cEther(txDetails?: Truffle.TransactionDetails): Promise<string>;

    comp(txDetails?: Truffle.TransactionDetails): Promise<string>;

    comptroller(txDetails?: Truffle.TransactionDetails): Promise<string>;

    delegate(
      avatar: string,
      delegatee: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    doesAvatarExist(
      avatar: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    doesAvatarExistFor(
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    getAvatar: {
      (owner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    newAvatar: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<string>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    ownerOf(
      avatar: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

    score(txDetails?: Truffle.TransactionDetails): Promise<string>;

    setPool: {
      (newPool: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newPool: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newPool: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newPool: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    whitelistedAvatarCalls(
      target: string,
      functionSig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

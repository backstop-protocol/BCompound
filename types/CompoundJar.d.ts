/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface CompoundJarContract
  extends Truffle.Contract<CompoundJarInstance> {
  "new"(
    _withdrawTimelock: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<CompoundJarInstance>;
}

export interface Withdrawn {
  name: "Withdrawn";
  args: {
    user: string;
    token: string;
    amount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

type AllEvents = Withdrawn;

export interface CompoundJarInstance extends Truffle.ContractInstance {
  connector(txDetails?: Truffle.TransactionDetails): Promise<string>;

  scoreWithdrawn(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  setConnector: {
    (_connector: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _connector: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _connector: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _connector: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      user: string,
      cToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      user: string,
      cToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string,
      cToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string,
      cToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawTimelock(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  withdrawn(
    arg0: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    connector(txDetails?: Truffle.TransactionDetails): Promise<string>;

    scoreWithdrawn(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    setConnector: {
      (_connector: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _connector: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _connector: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _connector: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdraw: {
      (
        user: string,
        cToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        user: string,
        cToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        user: string,
        cToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        user: string,
        cToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdrawTimelock(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    withdrawn(
      arg0: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
